package com.usher.diboson;

import java.math.BigDecimal;
import java.math.RoundingMode;

// =================================================================================
public class Arithmetic
{
    // =============================================================================
    private static final int OPERAND_ADD        =   0;
    private static final int OPERAND_DIVIDE     =   1;
    private static final int OPERAND_MULTIPLY   =   2;
    private static final int OPERAND_SUBTRACT   =   3;
    // -----------------------------------------------------------------------------
    @SuppressWarnings("MismatchedReadAndWriteOfArray")
    private int operandTypes [] = { OPERAND_ADD,
                                    OPERAND_DIVIDE,
                                    OPERAND_MULTIPLY,
                                    OPERAND_SUBTRACT};
    // -----------------------------------------------------------------------------
    private String operandSymbols [] = { "+",
                                         "/",
                                         "*",
                                         "-"};
    // =============================================================================

    // =============================================================================
    public class DoublePrecision
    {
        // -------------------------------------------------------------------------
        double  number;
        int     precision;
        String  precisionFormat;
        // -------------------------------------------------------------------------
        private DoublePrecision (int thePrecision)
        {
            // ---------------------------------------------------------------------
            precision           = thePrecision;
            precisionFormat     = "%." + precision + "f";
            // ---------------------------------------------------------------------
        }
        // -------------------------------------------------------------------------
        private DoublePrecision (double theNumber,int thePrecision)
        {
            // ---------------------------------------------------------------------
            number              = theNumber;
            precision           = thePrecision;
            precisionFormat     = "%." + precision + "f";
            // ---------------------------------------------------------------------
        }
        // -------------------------------------------------------------------------
        private double Adjusted ()
        {
            // ---------------------------------------------------------------------
            return getNumber (number,precision);
            // ---------------------------------------------------------------------
        }
        // -------------------------------------------------------------------------
        String Print ()
        {
            // ---------------------------------------------------------------------
            if (number == Math.floor (number))
            {
                return String.format ("%d",(int) number);
            }
            else
            {
                return String.format (precisionFormat,number);
            }
            // ---------------------------------------------------------------------
        }
        // -------------------------------------------------------------------------
    }
    // =============================================================================

    // =============================================================================
    DoublePrecision     answer;
    DoublePrecision     lowNumber;
    int                 numberOfOperands;
    double              range;
    // -----------------------------------------------------------------------------
    double  numbers [];
    int     operands [];
    double  secondNumber;
    // =============================================================================

    // =============================================================================
    public Arithmetic (double theLowNumber,
                       double theRange,
                       int thePrecision,
                       int theAnswerPrecision,
                       int theNumberOfOperands)
    {
        // -------------------------------------------------------------------------
        // 14/03/2020 ECU added the number of operands
        // -------------------------------------------------------------------------
        answer              =   new DoublePrecision (theAnswerPrecision);
        lowNumber           =   new DoublePrecision (theLowNumber,thePrecision);
        numberOfOperands    =   theNumberOfOperands;
        range               =   theRange;
        // -------------------------------------------------------------------------
        // 14/03/2020 ECU initialise any arrays
        // -------------------------------------------------------------------------
        numbers     = new double [theNumberOfOperands + 1];
        operands    = new int [theNumberOfOperands];
        // -------------------------------------------------------------------------
    }
    // =============================================================================
    public Arithmetic (ArithmeticData theData)
    {
        // -------------------------------------------------------------------------
        // 14/03/2020 ECU added to created the object from supplied data
        // -------------------------------------------------------------------------
        this ((double) theData.lowNumber,(double) theData.range, theData.inputPrecision,theData.resultPrecision,theData.numberOfOperands);
        // -------------------------------------------------------------------------
    }
    // =============================================================================

    // =============================================================================
    double getNumber (double theLowNumber,double theRange,int thePrecision)
    {
        // -------------------------------------------------------------------------
        // 04/03/2020 ECU get a random number in the specified range
        // -------------------------------------------------------------------------
        double localRandomNumber = (Math.random() * (theRange - 1)) + theLowNumber;
        // -------------------------------------------------------------------------
        // 04/03/2020 ECU now return the generated number
        // --------------------------------------------------------------------------
        return getNumber (localRandomNumber,thePrecision);
        // -------------------------------------------------------------------------
    }
    // =============================================================================
    double getNumber ()
    {
        // -------------------------------------------------------------------------
        // 04/03/2020 ECU get a random number in the predefined range
        // -------------------------------------------------------------------------
        return getNumber (lowNumber.number,range,lowNumber.precision);
        // -------------------------------------------------------------------------
    }
    // =============================================================================
    double getNumber (double theNumber,int thePrecision)
    {
        // -------------------------------------------------------------------------
        return BigDecimal.valueOf (theNumber)
                .setScale (thePrecision, RoundingMode.HALF_UP)
                .doubleValue ();
        // -------------------------------------------------------------------------
    }
    // =============================================================================
    int getOperand ()
    {
        // -------------------------------------------------------------------------
        // 04/03/2020 ECU return a random operand
        // -------------------------------------------------------------------------
        return (int) getNumber (OPERAND_ADD,operandTypes.length,0);
        // -------------------------------------------------------------------------
    }
    // =============================================================================
    String printNumber (double theNumber)
    {
        // -------------------------------------------------------------------------
        if (theNumber == Math.floor(theNumber))
        {
            return String.format ("%d",(int)theNumber);
        }
        else
        {
            return String.format (lowNumber.precisionFormat,theNumber);
        }
         // ------------------------------------------------------------------------
    }
    // =============================================================================
    String printTheProblem ()
    {
        // -------------------------------------------------------------------------
        // 14/03/2020 ECU put the problem into printable form
        // -------------------------------------------------------------------------
        String localString = StaticData.BLANK_STRING;
        // -------------------------------------------------------------------------
        for (int index = 0; index < numberOfOperands; index++)
        {
            // ---------------------------------------------------------------------
            // 14/03/2020 ECU get the number and it's associated operand
            // ---------------------------------------------------------------------
            localString += printNumber (numbers  [index]) + StaticData.SPACE_STRING + operandSymbols [operands [index]] + StaticData.SPACE_STRING;
            // ---------------------------------------------------------------------
        }
        // -------------------------------------------------------------------------
        // 14/03/2020 ECU now add the final number
        // -------------------------------------------------------------------------
        localString += printNumber (numbers  [numberOfOperands]);
        // -------------------------------------------------------------------------
        // 14/03/2020 ECU return the printed question
        // -------------------------------------------------------------------------
        return localString;
        // -------------------------------------------------------------------------
    }
    // =============================================================================
    void setAProblem ()
    {
        // -------------------------------------------------------------------------
        // 14/03/2020 ECU set a problem for the number of operands supplied
        // -------------------------------------------------------------------------
        for (int index = 0; index < numberOfOperands; index++)
        {
            // ---------------------------------------------------------------------
            // 14/03/2020 ECU get the number and it's associated operand
            // ---------------------------------------------------------------------
            numbers  [index]    = getNumber  ();
            operands [index]    = getOperand ();
            // ---------------------------------------------------------------------
        }
        // -------------------------------------------------------------------------
        // 14/03/2020 ECU now add the final number
        // -------------------------------------------------------------------------
        numbers [numberOfOperands] = getNumber ();
        // -------------------------------------------------------------------------
    }
    // =============================================================================
    double solveProblem (double theFirstNumber,int theOperand,double theSecondNumber)
    {
        // -------------------------------------------------------------------------
        switch (theOperand)
        {
            // ---------------------------------------------------------------------
            case OPERAND_ADD:
                return theFirstNumber + theSecondNumber;
            // ---------------------------------------------------------------------
            case OPERAND_DIVIDE:
                return theFirstNumber / theSecondNumber;
            // ---------------------------------------------------------------------
            case OPERAND_MULTIPLY:
                return theFirstNumber * theSecondNumber;
            // ---------------------------------------------------------------------
            case OPERAND_SUBTRACT:
                return theFirstNumber - theSecondNumber;
            // --------------------------------------------------------------------
            default:
                break;
            // --------------------------------------------------------------------
        }
        // -------------------------------------------------------------------------
        return StaticData.NOT_SET;
        // -------------------------------------------------------------------------
    }
    // =============================================================================
    double solveTheProblem ()
    {
        // -------------------------------------------------------------------------
        // 14/03/2020 ECU solve the problem that has been set
        // -------------------------------------------------------------------------
        answer.number = numbers [0];
        // -------------------------------------------------------------------------
        for (int index = 0; index < numberOfOperands; index++)
        {
            answer.number = solveProblem (answer.number,operands [index],numbers [index+1]);
        }
        // -------------------------------------------------------------------------
        // 14/03/2020 ECU return the answer in adjusted form
        // -------------------------------------------------------------------------
        return answer.Adjusted ();
        // -------------------------------------------------------------------------
    }
    // =============================================================================
}
// =================================================================================
